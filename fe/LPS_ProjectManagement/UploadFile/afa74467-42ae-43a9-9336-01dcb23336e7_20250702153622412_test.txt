using LPS_ProjectManagement.Helper;
using LPS_ProjectManagement.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;

namespace LPS_ProjectManagement.Controllers
{
    public class UploadController : Controller
    {
        GlobalHelper GH = new GlobalHelper();
        // GET: Upload
        public ActionResult UploadFile(string ProjHead)
        {
            try
            {
                var param = ProjHead.Split('|');

                string PersonNumber = Session["PersonalNumber"].ToString();
                string ProjectNo = GH.GetRoot(Convert.ToInt32(param[0]));
                SharepointModel sharepointModel = new SharepointModel();
                var rsult = Json(sharepointModel.UploadMultiFiles(Request, Server, Convert.ToInt32(param[1]), ProjectNo //param[0]
                    , PersonNumber, param[2], Convert.ToInt64(param[3]), param[0]), JsonRequestBehavior.AllowGet);
                return rsult;

            }
            catch (Exception ex)
            {
                return Json(new { res = ex.ToString() });
            }
        }

        public ActionResult UploadFileandGetId(string ProjHead)
        {
            try
            {
                var param = ProjHead.Split('|');

                string PersonNumber = Session["PersonalNumber"].ToString();
                string ProjectNo = GH.GetRoot(Convert.ToInt32(param[0]));
                SharepointModel sharepointModel = new SharepointModel();
                var rsult = Json(sharepointModel.UploadMultiFilesandGetId(Request, Server, Convert.ToInt32(param[1]), ProjectNo //param[0]
                    , PersonNumber, param[2], Convert.ToInt64(param[3]), param[0]), JsonRequestBehavior.AllowGet);
                return rsult;

            }
            catch (Exception ex)
            {
                return Json(new { res = ex.ToString() });
            }
        }

        public ActionResult UploadFileandGetId2(string ProjHead)
        {
            try
            {
                var paramtype = Request["tipe"];
                var param = paramtype.Split('|');
                string PersonNumber = Session["PersonalNumber"].ToString();
                string ProjectNo = GH.GetRoot(Convert.ToInt32(ProjHead));
                SharepointModel sharepointModel = new SharepointModel();
                var rsult = Json(sharepointModel.UploadMultiFilesandGetId(Request, Server, Convert.ToInt32(param[0]), ProjectNo //param[0]
                    , PersonNumber, param[1], Convert.ToInt64(param[2]), ProjHead), JsonRequestBehavior.AllowGet);
                return rsult;

            }
            catch (Exception ex)
            {
                return Json(new { res = ex.ToString() });
            }
        }

        public ActionResult Download(int ProjectHeaderID , string name )
        {
            try
            {
                GlobalHelper GH = new GlobalHelper();

                var ProjectNo = GH.GetRoot(ProjectHeaderID);

                SharepointModel sharepointModel = new SharepointModel();
                sharepointModel.DownloadFile(Convert.ToString(ProjectNo), name);
                return new EmptyResult();    

            }
            catch (Exception ex)
            {
                return Json(new { res = ex.ToString() });
            }
        }

        [HttpGet]
        public ActionResult ShowFile(int ProjectHeaderID, string name)
        {
            try
            {
                GlobalHelper GH = new GlobalHelper();

                var ProjectNo = GH.GetRoot(ProjectHeaderID);

                SharepointModel sharepointModel = new SharepointModel();
                sharepointModel.DownloadPdf(Convert.ToString(ProjectNo), name);
                return new EmptyResult();

            }
            catch (Exception ex)
            {
                return Json(new { res = ex.ToString() });
            }
        }

        private Task GetFileStreamAsync(object fileName)
        {
            throw new NotImplementedException();
        }

        public string CreateFolder(string ProjectName)
        {
            try
            {
                SharepointModel sharepointModel = new SharepointModel();
                return sharepointModel.CreateFolderPerProject(ProjectName);
            }
            catch (Exception ex)
            {
                return ex.ToString();
            }
        }

        public ActionResult DeleteFile(string ProjectHeaderID , string DocumentID)
        {
            Models.UserManagementModels.MultiPorpose MP = new Models.UserManagementModels.MultiPorpose();

            string param = ProjectHeaderID + "|" + DocumentID;

            MP.ID = param;

            HttpClient client = new HttpClient();
            string url = ConfigurationManager.AppSettings["WebAPI"].ToString() + "DeleteFile";
            Uri baseAddress = new Uri(url);

            client.BaseAddress = baseAddress;
            client.DefaultRequestHeaders.Accept.Clear();

            var response = client.PostAsJsonAsync(baseAddress.ToString(), MP).Result;
            var result = response.Content.ReadAsStringAsync().Result;


            string val = result;

            string vali = val.Remove(0, 1);
            string valu = vali.Remove(vali.Length - 1);

            return Json(new { status = valu });
        }
               
    }
}

using System;
using System.IO;
using System.Linq;
using System.Web;
using Microsoft.SharePoint.Client;
using System.Security;

using ClientOM = Microsoft.SharePoint.Client;
using System.Configuration;
using System.Net;
using System.Net.Http;

namespace LPS_ProjectManagement.Models
{
    public class SharepointModel
    {
        public ClientContext clientContext { get; set; }
        private string ServerSiteUrl = ConfigurationManager.AppSettings["SharepointDomain"].ToString();
        private string LibraryUrl = ConfigurationManager.AppSettings["SharepointFolder"].ToString();
        private string UserName = ConfigurationManager.AppSettings["SharepointUsername"].ToString();
        private string Password = ConfigurationManager.AppSettings["SharepointPassword"].ToString();
        private string DocumentList = ConfigurationManager.AppSettings["SharepointDocumentList"].ToString();
        private string Domain = @"lps";
        private Web WebClient { get; set; }

        public SharepointModel()
        {
            this.Connect();
        }

        public void Connect()
        {
            try
            {
                using (clientContext = new ClientContext(ServerSiteUrl))
                {
                    var securePassword = new SecureString();
                    foreach (char c in Password)
                    {
                        securePassword.AppendChar(c);
                    }

                    NetworkCredential cred = new NetworkCredential(UserName, Password, Domain);
                    //clientContext.Credentials = new SharePointOnlineCredentials(UserName, securePassword);
                    //WebClient = clientContext.Web;
                    clientContext.Credentials = cred;
                    //clientContext.AuthenticationMode = ClientAuthenticationMode.Default;
                    WebClient = clientContext.Web;
                }
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        public string UploadMultiFiles(HttpRequestBase Request, HttpServerUtilityBase Server, int DocType , string ProjHead , string PersonNumber , string IDDocPhase, Int64 TaskID, string ProjectName)
        {
            try
            {
                HttpPostedFileBase file = null;
                var status = "";
                for (int f = 0; f < Request.Files.Count; f++)
                {
                    file = Request.Files[f] as HttpPostedFileBase;

                    string[] SubFolders = LibraryUrl.Split('/');
                    string filename = System.IO.Path.GetFileName(file.FileName);
                    string ext = Path.GetExtension(file.FileName);

                    if (ext != ".exe" && ext != ".mpp")
                    {
                        string namafile = "";
                        if (DocType == 1)
                        {
                            namafile = "PC_" + filename;
                        }
                        else
                        if (DocType == 2)
                        {
                            namafile = "PP_" + filename;
                        }
                        else
                        if (DocType == 3)
                        {
                            namafile = "Milestone_" + filename;
                        }
                        else
                        if (DocType == 4)
                        {
                            namafile = "Closing_" + filename;
                        }
                        else
                        if (DocType == 5)
                        {
                            namafile = "Change_" + filename;
                        }
                        else
                        if (DocType == 6 )
                        {
                            namafile = "Lampiran_" + filename;
                        }
                        //var path = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads"), filename);
                        var path = System.IO.Path.Combine(Server.MapPath("~/UploadFile/"), namafile);
                        //var path = file.FileName;
                        file.SaveAs(path);

                        using (var fs = new FileStream(path, FileMode.Open))
                        {
                            var fi = new FileInfo(path);
                            var list = clientContext.Web.Lists.GetByTitle(DocumentList);
                            clientContext.Load(list.RootFolder);
                            clientContext.ExecuteQuery();
                            var fileUrl = String.Format("{0}/{1}/{2}/{3}", list.RootFolder.ServerRelativeUrl, SubFolders[1], ProjHead, fi.Name);

                            Microsoft.SharePoint.Client.File.SaveBinaryDirect(clientContext, fileUrl, fs, true);
                        }

                        if (System.IO.File.Exists(path))
                        {
                            System.IO.File.Delete(path);
                        }

                        string param = DocType + "|" + ProjHead + "|" + PersonNumber + "|" + namafile + "|" + IDDocPhase + "|" + TaskID;

                        Models.UserManagementModels.MultiPorpose MP = new Models.UserManagementModels.MultiPorpose();
                        MP.ID = param;
                        HttpClient client = new HttpClient();
                        string url = ConfigurationManager.AppSettings["WebAPI"].ToString() + "UploadFile";
                        Uri baseAddress = new Uri(url);

                        client.BaseAddress = baseAddress;
                        client.DefaultRequestHeaders.Accept.Clear();
                        var response = client.PostAsJsonAsync(baseAddress.ToString(), MP).Result;
                        var result = response.Content.ReadAsStringAsync().Result;

                        string val = result;
                        string va = val.Remove(0, 1);
                        string final = va.Remove(va.Length - 1);

                        status = final;
                    }
                    else
                    {
                        status = "File tidak didukung";
                    }
                }

                return status;
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        public string UploadMultiFilesandGetId(HttpRequestBase Request, HttpServerUtilityBase Server, int DocType, string ProjHead, string PersonNumber, string IDDocPhase, Int64 TaskID, string ProjectName)
        {
            try
            {
                HttpPostedFileBase file = null;
                var status = "";
                for (int f = 0; f < Request.Files.Count; f++)
                {
                    file = Request.Files[f] as HttpPostedFileBase;

                    string[] SubFolders = LibraryUrl.Split('/');
                    string filename = System.IO.Path.GetFileName(file.FileName);
                    string ext = Path.GetExtension(file.FileName);

                    if (ext != ".exe" && ext != ".mpp")
                    {
                        string namafile = "";
                        if (DocType == 1)
                        {
                            namafile = "PC_" + filename;
                        }
                        else
                        if (DocType == 2)
                        {
                            namafile = "PP_" + filename;
                        }
                        else
                        if (DocType == 3)
                        {
                            namafile = "Milestone_" + filename;
                        }
                        else
                        if (DocType == 4)
                        {
                            namafile = "Closing_" + filename;
                        }
                        else
                        if (DocType == 5)
                        {
                            namafile = "Change_" + filename;
                        }
                        else
                        if (DocType == 6)
                        {
                            namafile = "Lampiran_" + filename;
                        }
                        //var path = System.IO.Path.Combine(Server.MapPath("~/App_Data/uploads"), filename);
                        var path = System.IO.Path.Combine(Server.MapPath("~/UploadFile/"), namafile);
                        //var path = file.FileName;
                        file.SaveAs(path);

                        using (var fs = new FileStream(path, FileMode.Open))
                        {
                            var fi = new FileInfo(path);
                            var list = clientContext.Web.Lists.GetByTitle(DocumentList);
                            clientContext.Load(list.RootFolder);
                            clientContext.ExecuteQuery();
                            var fileUrl = String.Format("{0}/{1}/{2}/{3}", list.RootFolder.ServerRelativeUrl, SubFolders[1], ProjHead, fi.Name);

                            Microsoft.SharePoint.Client.File.SaveBinaryDirect(clientContext, fileUrl, fs, true);
                        }

                        if (System.IO.File.Exists(path))
                        {
                            System.IO.File.Delete(path);
                        }

                        string param = DocType + "|" + ProjHead + "|" + PersonNumber + "|" + namafile + "|" + IDDocPhase + "|" + TaskID;

                        Models.UserManagementModels.MultiPorpose MP = new Models.UserManagementModels.MultiPorpose();
                        MP.ID = param;
                        HttpClient client = new HttpClient();
                        string url = ConfigurationManager.AppSettings["WebAPI"].ToString() + "UploadFileGetId";
                        Uri baseAddress = new Uri(url);

                        client.BaseAddress = baseAddress;
                        client.DefaultRequestHeaders.Accept.Clear();
                        var response = client.PostAsJsonAsync(baseAddress.ToString(), MP).Result;
                        var result = response.Content.ReadAsStringAsync().Result;

                        string val = result;
                        string va = val.Remove(0, 1);
                        string final = va.Remove(va.Length - 1);

                        status = final;
                    }
                    else
                    {
                        status = "File tidak didukung";
                    }
                }

                return status;
            }
            catch (Exception ex)
            {
                throw (ex);
            }
        }

        //public Microsoft.SharePoint.Client.File DownloadFiles()
        //{
        //    try
        //    {
        //        string[] SubFolders = LibraryUrl.Split('/');
        //        string filename = System.IO.Path.GetFileName(file.FileName);

        //        var fi = new FileInfo(path);
        //        var list = clientContext.Web.Lists.GetByTitle(DocumentList);
        //        clientContext.Load(list.RootFolder);
        //        clientContext.ExecuteQuery();
        //        var fileUrl = String.Format("{0}/{1}/{2}/{3}", list.RootFolder.ServerRelativeUrl, SubFolders[1], ProjectName, fi.Name);

        //        return Microsoft.SharePoint.Client.File.OpenBinaryDirect(clientContext, fileUrl);

        //    }
        //    catch (Exception ex)
        //    {
        //        throw (ex);
        //    }
        //}

        public string CreateFolderPerProject(string ProjectName)
        {

            try
            {
                List list = clientContext.Web.Lists.GetByTitle(DocumentList);
                var folder = list.RootFolder.Folders;
                clientContext.Load(folder);
                clientContext.ExecuteQuery();

                string[] SubFolders = LibraryUrl.Split('/');

                foreach (Folder subFolder in folder)
                {
                    if (subFolder.Name == SubFolders[1])
                    {
                        Folder folderm = AddSubFolder(subFolder, ProjectName);
                    }
                }

                return "";
            }
            catch (Exception ex)
            {

                return ex.Message;
            }
           
        }

        public Folder AddSubFolder(Folder ParentFolder, string folderName)
        {
            Folder resultFolder = ParentFolder.Folders.Add(folderName);
            clientContext.ExecuteQuery();
            return resultFolder;
        }

        public void DownloadFile(string ProjectName , string Filename)
        {
            try
            {
                HttpContext Context = HttpContext.Current;
                HttpResponse Response = HttpContext.Current.Response;
          
                byte[] Content = DownloadByte(ProjectName, Filename);

                string mimeType = MimeMapping.GetMimeMapping(Filename);

                Context.Response.ClearContent();
                Context.Response.Clear();
                Context.Response.ContentType = mimeType;
                Context.Response.AddHeader("content-disposition", "attachment; filename=" + Filename);
                Context.Response.BufferOutput = true;
                Context.Response.OutputStream.Write(Content, 0, Content.Length);
                Context.ApplicationInstance.CompleteRequest();
                Context.Response.Flush();
                Context.ApplicationInstance.CompleteRequest();
            }
            //Context.Response.End();
            catch (System.Threading.ThreadAbortException ex)
            {
                throw ex;
            }

        }

        public void DownloadPdf(string ProjectName, string Filename)
        {
            try
            {
                HttpContext Context = HttpContext.Current;
                HttpResponse Response = HttpContext.Current.Response;

                byte[] Content = DownloadByte(ProjectName, Filename);

                string mimeType = MimeMapping.GetMimeMapping(Filename);

                Context.Response.ClearContent();
                Context.Response.Clear();
                Context.Response.ContentType = mimeType;
                Context.Response.AddHeader("content-length", Content.Length.ToString());
                Context.Response.BufferOutput = true;
                Context.Response.BinaryWrite(Content);
                Context.ApplicationInstance.CompleteRequest();
                Context.Response.Flush();
                Context.ApplicationInstance.CompleteRequest();


                //string FilePath = Server.MapPath("javascript1-sample.pdf");
                //WebClient User = new WebClient();
                //Byte[] FileBuffer = User.DownloadData(FilePath);
                //if (FileBuffer != null)
                //{
                //    Response.ContentType = "application/pdf";
                //    Response.AddHeader("content-length", FileBuffer.Length.ToString());
                //    Response.BinaryWrite(FileBuffer);
                //}
            }
            
            catch (System.Threading.ThreadAbortException ex)
            {
                throw ex;
            }

        }

        public byte[] DownloadByte(string projectname , string filename)
        {
            WebClient webClient = new WebClient();
            webClient.Credentials = new NetworkCredential(UserName, Password, Domain);

            try
            {
                string[] SubFolders = LibraryUrl.Split('/');
                var list = clientContext.Web.Lists.GetByTitle(DocumentList);
                clientContext.Load(list.RootFolder);
                clientContext.ExecuteQuery();

                var fileUrl = String.Format("{0}/{1}/{2}/{3}/{4}", ServerSiteUrl, list.RootFolder.ServerRelativeUrl, SubFolders[1], projectname, filename);

               
                //set destination address
                var destination = System.Web.Hosting.HostingEnvironment.MapPath("~/UploadFile/") + filename;
                string localPath = new Uri(destination).LocalPath;
                var bytes = webClient.DownloadData(fileUrl);
                if (System.IO.File.Exists(destination))
                    System.IO.File.Delete(destination);

                return bytes;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }
    }

}

<?xml version="1.0" encoding="utf-8"?>
<!--
  For more information on how to configure your ASP.NET application, please visit
  https://go.microsoft.com/fwlink/?LinkId=301880
  -->
<configuration>
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    
    <!--LOCAL-->
    <add key="WebAPI" value="http://localhost.fiddler:49972/api/" />
    <add key="WebAPIProject" value="http://localhost.fiddler:49972/" />

    <!--IIS LOCAL-->
	  <!--<add key="WebAPI" value="http://pcp-appdev-be:2700/api/" />
	  <add key="WebAPIProject" value="http://pcp-appdev-be:2700/" />-->
    
    <!--DevLps-->
    <!--<add key="WebAPI" value="http://eq-appdev.lps.corp/WS_PengelolaanProyek2/api/" />
    <add key="WebAPIProject" value="http://eq-appdev.lps.corp/WS_PengelolaanProyek2/WS_Promise/" />-->
    
    <!--ProdLps-->
    <!--<add key="WebAPI" value="http://promise.lps.go.id/WS_PROMISE/api/" />
    <add key="WebAPIProject" value="http://promise.lps.go.id/WS_PROMISE/" />-->

    <add key="SharepointUsername" value="ebiz.sharepoint" />
    <add key="SharepointPassword" value="Password!2024" />
    <add key="SharepointDomain" value="http://eq-ecmweb1-dev/" />
    <add key="SharepointFolder" value="ApplicationDocuments/LPS_ProjectManagement/DEV/" />
    <add key="SharepointDocumentList" value="ApplicationDocuments" />
    <add key="aspnet:AllowAnonymousImpersonation" value="false" />

    
  </appSettings>
  <system.webServer>
    <security>
      <requestFiltering>
        <requestLimits maxAllowedContentLength="2147483648" />
      </requestFiltering>
    </security>
  </system.webServer>
  <system.web>
    <globalization culture="en-NZ" uiCulture="en-NZ" />
    <compilation debug="true" targetFramework="4.5" />
    <httpRuntime targetFramework="4.5" maxRequestLength="2147483647" executionTimeout="1600" requestLengthDiskThreshold="2147483647" />
    <authentication mode="Forms">
      <forms timeout="60" />
    </authentication>
    <sessionState timeout="60"></sessionState> 
  </system.web>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-11.0.0.0" newVersion="11.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.2.4.0" newVersion="5.2.4.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.SharePoint.Client.Runtime" publicKeyToken="71e9bce111e9429c" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-15.0.0.0" newVersion="15.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>
